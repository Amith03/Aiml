import numpy as np
from sklearn import datasets
from sklearn.model_selection import train_test_split
from collections import Counter

iris = datasets.load_iris()
X = iris.data
y = iris.target

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=48)

def euclidean_dist(x1, x2):
    return np.sqrt(np.sum((x1-x2) **2))



class KNN:
    def __init__(self, k=3):
        self.k = k
        
    def fit(self, X, y):
        self.X_train = X
        self.y_train = y
        
    def predict(self, X):
        y_pred = [self._predict(x) for x in X]
        return np.array(y_pred)
    
    def _predict(self, x):
        dist = [euclidean_dist(x, x_train) for x_train in self.X_train]
        k_indices = np.argsort(dist)[:self.k]
        k_near_labels = [self.y_train[i] for i in k_indices]
        most_common = Counter(k_near_labels).most_common(1)
        return most_common[0][0]



model = KNN(k=5)
model.fit(X_train, y_train)
preds = model.predict(X_test)

crt_pred = sum(preds == y_test)
print(f"Correct Predictions: {crt_pred}/ {len(y_test)}")

wrg_indices = np.where(preds != y_test)[0]
for i in wrg_indices:
    print(f"Predicted: {iris.target_names[preds[i]]}, Actual: {iris.target_names[y_test[i]]}")
